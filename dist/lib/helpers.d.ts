import BigNumber from 'bignumber.js';
import type { HardhatRuntimeEnvironment } from 'hardhat/types';
/**
 * Overwrites build artifacts to inject generated bytecode
 *
 * @param hre - hardhat runtime environment
 * @param contractName - contract name to overwrite
 * @param bytecode - bytecode to inject
 * @returns promise for completion
 */
export declare function overwriteArtifact(hre: HardhatRuntimeEnvironment, contractName: string, bytecode: string): Promise<void>;
export declare const SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617n;
export declare function fromHexToDec(hex: string): string;
export declare function fromDecToHex(dec: string, withPrefix?: boolean): string;
export declare function fromHexToBytes32(hex: string): string;
export declare function generateRandomBytes32Array(length: number): Uint8Array[];
/**
 * Hashes string to field number using poseidon. This is needed to break down the string into field elements that can be used in the circuit.
 * @param input string to be hashed
 * @param poseidon poseidon object for hashing (passed to avoid rebuilding with await)
 * @returns field number as BigNumber
 */
export declare function hashStringToFieldNumber(input: string, poseidon: any): BigNumber;
/**
 * Convert typed byte array to bigint
 *
 * @param array - Array to convert
 * @returns bigint
 */
export declare function arrayToBigInt(array: Uint8Array): bigint;
/**
 * Convert bigint to byte array
 *
 * @param bn - bigint
 * @returns byte array
 */
export declare function bigIntToArray(bn: bigint): Uint8Array;
export declare function processProof(proof: any): any[];
export declare function processPublicSignals(publicSignals: any): any;
